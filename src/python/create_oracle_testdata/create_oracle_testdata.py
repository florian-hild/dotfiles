#!/usr/bin/env python3

"""
-------------------------------------------------------------------------------
Author        : Florian Hild
Created       : 2024-06-14
Python version: 3.x
Description   :
-------------------------------------------------------------------------------
"""

import cx_Oracle
import random
import string
import time

__VERSION__ = "1.0.0"
tns_string = "(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 10.143.253.8)(PORT = 1521))) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = test01)))"
conn = cx_Oracle.connect(user="test1", password="test1", dsn=tns_string)
cursor = conn.cursor()
batch_size = 2000  # Number of rows per batch
target_size_gb = 1


def create_table():
    create_table_stmt = """
  CREATE TABLE test_data (
      id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
      data VARCHAR2(4000)
  )
  """

    if cursor.execute("SELECT COUNT(*) FROM user_tables WHERE table_name = 'TEST_DATA'").fetchone()[0] == 1:
        cursor.execute("DROP TABLE test_data PURGE")
    cursor.execute(create_table_stmt)

def generate_random_string(length:int) -> str:
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def main():
    create_table()

    # Insert data in batches
    rows_per_gb = (1024**3) // 4000  # Approximation, depends on actual row size
    total_rows = rows_per_gb * target_size_gb

    start_time = time.time()
    insert_sql = "INSERT INTO test_data (data) VALUES (:data)"
    for i in range(0, total_rows, batch_size):
        batch_data = [(generate_random_string(4000),) for _ in range(batch_size)]
        cursor.executemany(insert_sql, batch_data)
        conn.commit()
        print(f"Inserted batch {i // batch_size + 1} of {total_rows // batch_size}")

    end_time = time.time()
    print(f"Total time taken: {end_time - start_time} seconds")

    # Clean up
    cursor.close()
    conn.close()


if __name__ == "__main__":
    main()
